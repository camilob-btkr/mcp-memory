@page "/"
@using MCP.Web.UI.Models
@using MCP.Web.UI.Services
@inject ChatService ChatService
@inject IJSRuntime JSRuntime

<PageTitle>MCP Chat - Modern AI Assistant</PageTitle>

<div class="chat-container">
    <div class="chat-header">
        <div class="header-content">
            <h1><i class="fas fa-robot"></i> MCP Chat Interface</h1>
            <div class="connection-status">
                <span class="status-dot"></span>
                <span>Connected</span>
            </div>
        </div>
        <div class="chat-id-section">
            <label for="chatId"><i class="fas fa-fingerprint"></i> Chat ID:</label>
            <input id="chatId" 
                   type="text" 
                   class="chat-id-input @(string.IsNullOrWhiteSpace(chatId) ? "input-error" : "")"
                   @bind="chatId"
                   @bind:event="oninput"
                   @onchange="UpdateChatState"
                   placeholder="Enter unique chat ID (e.g., user123)"
                   disabled="@isLoading" />
            @if (!string.IsNullOrWhiteSpace(chatId) && !chatState.IsValidChatId())
            {
                <span class="validation-error">Chat ID must be 1-50 characters, alphanumeric with - or _</span>
            }
        </div>
    </div>

    <div class="chat-messages" @ref="messagesContainer">
        @if (messages.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-comments"></i>
                </div>
                <h2>Welcome to MCP Chat!</h2>
                <p>Enter a Chat ID above and start your conversation.</p>
                <p class="hint">Your AI assistant is ready to help</p>
            </div>
        }
        else
        {
            @foreach (var message in messages)
            {
                <div class="message @(message.Role == ChatRoles.User ? "message-user" : "message-assistant")">
                    <div class="message-avatar">
                        <i class="@(message.Role == ChatRoles.User ? "fas fa-user" : "fas fa-robot")"></i>
                    </div>
                    <div class="message-bubble">
                        <div class="message-header">
                            <span class="message-role">@message.Role</span>
                            <span class="message-time">@message.Timestamp.ToString("HH:mm:ss")</span>
                        </div>
                        <div class="message-content">
                        @if (message.IsLoading)
                        {
                            <div class="typing-indicator">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(message.ErrorMessage))
                        {
                            <div class="error-content">
                                <i class="fas fa-exclamation-triangle"></i>
                                @message.ErrorMessage
                            </div>
                        }
                        else
                        {
                            @((MarkupString)FormatMessage(message.Content))
                        }
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    @if (!string.IsNullOrEmpty(globalError))
    {
        <div class="global-error">
            <i class="fas fa-times-circle"></i>
            @globalError
            <button class="dismiss-error" @onclick="() => globalError = string.Empty">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }

    <div class="chat-input-section">
        <form @onsubmit="SendMessage" @onsubmit:preventDefault="true">
            <div class="input-group">
                <input type="text"
                       class="message-input"
                       @bind="currentMessage"
                       @bind:event="oninput"
                       placeholder="Type your message..."
                       disabled="@(!chatState.IsValidChatId() || isLoading)"
                       @ref="messageInput" />
                <button type="submit" 
                        class="send-button"
                        disabled="@(!chatState.IsValidChatId() || isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                    @if (isLoading)
                    {
                        <span class="spinner"></span>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane"></i>
                        <span>Send</span>
                    }
                </button>
            </div>
        </form>
    </div>
</div>

@code {
    private string _chatId = "";
    private string chatId 
    { 
        get => _chatId; 
        set 
        { 
            _chatId = value;
            chatState.CurrentChatId = value;
        } 
    }
    private string currentMessage = "";
    private List<ChatMessage> messages = new();
    private ChatState chatState = new();
    private bool isLoading = false;
    private string globalError = "";
    private ElementReference messagesContainer;
    private ElementReference messageInput;

    protected override void OnInitialized()
    {
        chatState.CurrentChatId = chatId;
    }

    private async Task SendMessage()
    {
        if (!chatState.IsValidChatId() || string.IsNullOrWhiteSpace(currentMessage) || isLoading)
            return;

        var userMessage = new ChatMessage
        {
            Role = ChatRoles.User,
            Content = currentMessage,
            Timestamp = DateTime.Now
        };

        messages.Add(userMessage);
        
        var assistantMessage = new ChatMessage
        {
            Role = ChatRoles.Assistant,
            Content = "",
            Timestamp = DateTime.Now,
            IsLoading = true
        };
        
        messages.Add(assistantMessage);
        
        var messageToSend = currentMessage;
        currentMessage = "";
        isLoading = true;
        globalError = "";
        
        StateHasChanged();
        await ScrollToBottom();

        try
        {
            var responseContent = new System.Text.StringBuilder();
            
            await foreach (var chunk in ChatService.SendMessageStreamAsync(chatId, messageToSend))
            {
                responseContent.Append(chunk);
                assistantMessage.Content = responseContent.ToString();
                assistantMessage.IsLoading = false;
                StateHasChanged();
                await ScrollToBottom();
            }

            if (string.IsNullOrEmpty(assistantMessage.Content))
            {
                assistantMessage.Content = "No response received from the server.";
                assistantMessage.ErrorMessage = "Empty response";
            }
        }
        catch (Exception ex)
        {
            assistantMessage.IsLoading = false;
            assistantMessage.ErrorMessage = $"Error: {ex.Message}";
            globalError = $"Failed to send message: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await FocusMessageInput();
        }
    }

    private string FormatMessage(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "";

        // Simple formatting for line breaks
        return content.Replace("\n", "<br />");
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);
    }

    private async Task FocusMessageInput()
    {
        await JSRuntime.InvokeVoidAsync("focusElement", messageInput);
    }

    private void UpdateChatState()
    {
        chatState.CurrentChatId = chatId;
        StateHasChanged();
    }
}